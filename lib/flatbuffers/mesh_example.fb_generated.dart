// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library example.fb;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Vec2 {
  Vec2._(this._bc, this._bcOffset);

  static const fb.Reader<Vec2> reader = _Vec2Reader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get x => const fb.Float32Reader().read(_bc, _bcOffset + 0);
  double get y => const fb.Float32Reader().read(_bc, _bcOffset + 4);

  @override
  String toString() {
    return 'Vec2{x: ${x}, y: ${y}}';
  }
}

class _Vec2Reader extends fb.StructReader<Vec2> {
  const _Vec2Reader();

  @override
  int get size => 8;

  @override
  Vec2 createObject(fb.BufferContext bc, int offset) => 
    Vec2._(bc, offset);
}

class Vec2Builder {
  Vec2Builder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(double x, double y) {
    fbBuilder.putFloat32(y);
    fbBuilder.putFloat32(x);
    return fbBuilder.offset;
  }

}

class Vec2ObjectBuilder extends fb.ObjectBuilder {
  final double _x;
  final double _y;

  Vec2ObjectBuilder({
    required double x,
    required double y,
  })
      : _x = x,
        _y = y;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putFloat32(_y);
    fbBuilder.putFloat32(_x);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Vec3 {
  Vec3._(this._bc, this._bcOffset);

  static const fb.Reader<Vec3> reader = _Vec3Reader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get x => const fb.Float32Reader().read(_bc, _bcOffset + 0);
  double get y => const fb.Float32Reader().read(_bc, _bcOffset + 4);
  double get z => const fb.Float32Reader().read(_bc, _bcOffset + 8);

  @override
  String toString() {
    return 'Vec3{x: ${x}, y: ${y}, z: ${z}}';
  }
}

class _Vec3Reader extends fb.StructReader<Vec3> {
  const _Vec3Reader();

  @override
  int get size => 12;

  @override
  Vec3 createObject(fb.BufferContext bc, int offset) => 
    Vec3._(bc, offset);
}

class Vec3Builder {
  Vec3Builder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(double x, double y, double z) {
    fbBuilder.putFloat32(z);
    fbBuilder.putFloat32(y);
    fbBuilder.putFloat32(x);
    return fbBuilder.offset;
  }

}

class Vec3ObjectBuilder extends fb.ObjectBuilder {
  final double _x;
  final double _y;
  final double _z;

  Vec3ObjectBuilder({
    required double x,
    required double y,
    required double z,
  })
      : _x = x,
        _y = y,
        _z = z;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putFloat32(_z);
    fbBuilder.putFloat32(_y);
    fbBuilder.putFloat32(_x);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Color {
  Color._(this._bc, this._bcOffset);

  static const fb.Reader<Color> reader = _ColorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get r => const fb.Float32Reader().read(_bc, _bcOffset + 0);
  double get g => const fb.Float32Reader().read(_bc, _bcOffset + 4);
  double get b => const fb.Float32Reader().read(_bc, _bcOffset + 8);

  @override
  String toString() {
    return 'Color{r: ${r}, g: ${g}, b: ${b}}';
  }
}

class _ColorReader extends fb.StructReader<Color> {
  const _ColorReader();

  @override
  int get size => 12;

  @override
  Color createObject(fb.BufferContext bc, int offset) => 
    Color._(bc, offset);
}

class ColorBuilder {
  ColorBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(double r, double g, double b) {
    fbBuilder.putFloat32(b);
    fbBuilder.putFloat32(g);
    fbBuilder.putFloat32(r);
    return fbBuilder.offset;
  }

}

class ColorObjectBuilder extends fb.ObjectBuilder {
  final double _r;
  final double _g;
  final double _b;

  ColorObjectBuilder({
    required double r,
    required double g,
    required double b,
  })
      : _r = r,
        _g = g,
        _b = b;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putFloat32(_b);
    fbBuilder.putFloat32(_g);
    fbBuilder.putFloat32(_r);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Vertex {
  Vertex._(this._bc, this._bcOffset);

  static const fb.Reader<Vertex> reader = _VertexReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Vec3 get position => Vec3.reader.read(_bc, _bcOffset + 0);
  Vec3 get normal => Vec3.reader.read(_bc, _bcOffset + 12);
  Vec3 get tangent => Vec3.reader.read(_bc, _bcOffset + 24);
  Vec2 get textureCoords => Vec2.reader.read(_bc, _bcOffset + 36);

  @override
  String toString() {
    return 'Vertex{position: ${position}, normal: ${normal}, tangent: ${tangent}, textureCoords: ${textureCoords}}';
  }
}

class _VertexReader extends fb.StructReader<Vertex> {
  const _VertexReader();

  @override
  int get size => 44;

  @override
  Vertex createObject(fb.BufferContext bc, int offset) => 
    Vertex._(bc, offset);
}

class VertexBuilder {
  VertexBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(fb.StructBuilder position, fb.StructBuilder normal, fb.StructBuilder tangent, fb.StructBuilder textureCoords) {
    textureCoords();
    tangent();
    normal();
    position();
    return fbBuilder.offset;
  }

}

class VertexObjectBuilder extends fb.ObjectBuilder {
  final Vec3ObjectBuilder _position;
  final Vec3ObjectBuilder _normal;
  final Vec3ObjectBuilder _tangent;
  final Vec2ObjectBuilder _textureCoords;

  VertexObjectBuilder({
    required Vec3ObjectBuilder position,
    required Vec3ObjectBuilder normal,
    required Vec3ObjectBuilder tangent,
    required Vec2ObjectBuilder textureCoords,
  })
      : _position = position,
        _normal = normal,
        _tangent = tangent,
        _textureCoords = textureCoords;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    _textureCoords.finish(fbBuilder);
    _tangent.finish(fbBuilder);
    _normal.finish(fbBuilder);
    _position.finish(fbBuilder);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Mesh {
  Mesh._(this._bc, this._bcOffset);
  factory Mesh(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Mesh> reader = _MeshReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Vertex>? get vertices => const fb.ListReader<Vertex>(Vertex.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get indices => const fb.ListReader<int>(fb.Uint16Reader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Mesh{vertices: ${vertices}, indices: ${indices}}';
  }
}

class _MeshReader extends fb.TableReader<Mesh> {
  const _MeshReader();

  @override
  Mesh createObject(fb.BufferContext bc, int offset) => 
    Mesh._(bc, offset);
}

class MeshBuilder {
  MeshBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addVerticesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIndicesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MeshObjectBuilder extends fb.ObjectBuilder {
  final List<VertexObjectBuilder>? _vertices;
  final List<int>? _indices;

  MeshObjectBuilder({
    List<VertexObjectBuilder>? vertices,
    List<int>? indices,
  })
      : _vertices = vertices,
        _indices = indices;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? verticesOffset = _vertices == null ? null
        : fbBuilder.writeListOfStructs(_vertices!);
    final int? indicesOffset = _indices == null ? null
        : fbBuilder.writeListUint16(_indices!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, verticesOffset);
    fbBuilder.addOffset(1, indicesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
